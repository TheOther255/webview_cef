set(cef_version "136.1.5%2Bg723b52b%2Bchromium-136.0.7103.93")

if(CMAKE_SYSTEM_NAME STREQUAL "Linux")
    message(STATUS "current system is Linux")
    set(cef_path_arm64 "https://cef-builds.spotifycdn.com/cef_binary_${cef_version}_linuxarm64.tar.bz2")
    set(cef_path_x86_64 "https://cef-builds.spotifycdn.com/cef_binary_${cef_version}_linux64.tar.bz2")
    if(CMAKE_HOST_SYSTEM_PROCESSOR STREQUAL "aarch64")
        set(arch "arm64")
    else()
        set(arch "x86_64")
    endif()
elseif(CMAKE_SYSTEM_NAME STREQUAL "Windows")
    message(STATUS "current system is Windows")
    set(cef_path_arm64 "https://cef-builds.spotifycdn.com/cef_binary_${cef_version}_windowsarm64.tar.bz2")
    set(cef_path_x64 "https://cef-builds.spotifycdn.com/cef_binary_${cef_version}_windows64.tar.bz2")
	if(CMAKE_HOST_SYSTEM_PROCESSOR STREQUAL "aarch64")
        set(arch "arm64")
	else()
        set(arch "x64")
	endif()
elseif(CMAKE_SYSTEM_NAME STREQUAL "Darwin")
    message(STATUS "current system is MacOS")
    message(STATUS "architecture is ${CMAKE_HOST_SYSTEM_PROCESSOR}")
    set(cef_path_arm64 "https://cef-builds.spotifycdn.com/cef_binary_${cef_version}_macosarm64.tar.bz2")
    set(cef_path_x86_64 "https://cef-builds.spotifycdn.com/cef_binary_${cef_version}_macosx64.tar.bz2")
    if(CMAKE_HOST_SYSTEM_PROCESSOR STREQUAL "aarch64" OR CMAKE_HOST_SYSTEM_PROCESSOR STREQUAL "arm64")
        set(arch "arm64")
	else()
        set(arch "x86_64")
	endif()
endif()

function(extract_file filename extract_dir)
    message(STATUS "${filename} will extract to ${extract_dir} ...")

    set(temp_dir ${CMAKE_BINARY_DIR}/tmp_for_extract.dir)
    if(EXISTS ${temp_dir})
        file(REMOVE_RECURSE ${temp_dir})
    endif()
    message(STATUS "create tmp directory ${temp_dir}")
    file(MAKE_DIRECTORY ${temp_dir})
    execute_process(COMMAND ${CMAKE_COMMAND} -E tar -xf ${filename}
            WORKING_DIRECTORY ${temp_dir})

    file(GLOB contents "${temp_dir}/*")
    list(LENGTH contents n)
    if(NOT n EQUAL 1 OR NOT IS_DIRECTORY "${contents}")
        set(contents "${temp_dir}")
    endif()

    get_filename_component(contents ${contents} ABSOLUTE)
    message(STATUS "move ${contents} to ${extract_dir}")
    # macos folder must exist, windows must not, linux doesn't care
    if(NOT CMAKE_SYSTEM_NAME STREQUAL "Windows")
        file(MAKE_DIRECTORY ${filepath})
    endif()
    file(RENAME ${contents} ${extract_dir})
    
    file(REMOVE_RECURSE ${temp_dir})

    #check download
    file(GLOB folders ${extract_dir}/*)
    list(LENGTH folders m)
    message(STATUS "items: ${m}")
    if(m LESS 5)
        message(FATAL_ERROR " download failed")
    endif()

endfunction()

function(download_file url filename)
    message(STATUS "Downloading ${filename} from ${url}")
    file(DOWNLOAD ${url} ${filename} STATUS SHOW_PROGRESS)
endfunction(download_file)

function(prepare_cef_files filepath)
    set(need_download FALSE)

    if(NOT EXISTS ${filepath})
        set(need_download TRUE)
    else()
        if(NOT EXISTS ${filepath}/local_version.txt)
            set(need_download TRUE)
        else()
            file(READ ${filepath}/local_version.txt local_version)
            if(local_version STREQUAL cef_version)
                message(STATUS "No need to update ${filepath}")
            else()
                set(need_download TRUE)
            endif()
        endif()
    endif()

    if(need_download)
        message(STATUS "Need to update ${filepath}")
        file(REMOVE_RECURSE ${filepath})
        prepare_and_build(${filepath})
    endif()
endfunction(prepare_cef_files)

function(build_cef filepath)

    if(CMAKE_SYSTEM_NAME STREQUAL "Linux")
        #delete test folder...is not needed
        file(REMOVE_RECURSE ${filepath}/tests)
        execute_process(COMMAND strip libcef.so WORKING_DIRECTORY "${filepath}/Release")
        # debug
        file(MAKE_DIRECTORY "${filepath}/build")
        execute_process(COMMAND ${CMAKE_COMMAND} -G "Unix Makefiles" -DCMAKE_BUILD_TYPE=Debug .. WORKING_DIRECTORY "${filepath}/build" RESULT_VARIABLE res)
        if(NOT res EQUAL 0)
            message(STATUS "seems like there are some build files missing")
            message(STATUS "please try again...the framework will get downloaded anew")
            file(REMOVE ${filepath}/local_version.txt)
            message(FATAL_ERROR "BUILD FILES MISSING, PLEASE TRY AGAIN (${res})")
        endif()
        # build 
        execute_process(COMMAND make -j4 WORKING_DIRECTORY "${filepath}/build")
        file(COPY_FILE "${filepath}/build/libcef_dll_wrapper/libcef_dll_wrapper.a" "${filepath}/Debug/libcef_dll_wrapper.a")
        # release
        execute_process(COMMAND ${CMAKE_COMMAND} -G "Unix Makefiles" -DCMAKE_BUILD_TYPE=Release .. WORKING_DIRECTORY "${filepath}/build" RESULT_VARIABLE res)
        if(NOT res EQUAL 0)
            message(STATUS "seems like there are some build files missing")
            message(STATUS "please try again...the framework will get downloaded anew")
            file(REMOVE ${filepath}/local_version.txt)
            message(FATAL_ERROR "BUILD FILES MISSING, PLEASE TRY AGAIN (${res})")
        endif()
        # build 
        execute_process(COMMAND make -j4 WORKING_DIRECTORY "${filepath}/build")
        file(COPY_FILE "${filepath}/build/libcef_dll_wrapper/libcef_dll_wrapper.a" "${filepath}/Release/libcef_dll_wrapper.a")
        # file(REMOVE_RECURSE "${filepath}/build")
    elseif(CMAKE_SYSTEM_NAME STREQUAL "Windows")
        file(COPY_FILE "${filepath}/../../windows/cef_variables.cmake" "${filepath}/cmake/cef_variables.cmake")
        #delete test folder...is not needed
        file(REMOVE_RECURSE ${filepath}/tests)
        # make build files
        file(MAKE_DIRECTORY "${filepath}/build")
        execute_process(COMMAND ${CMAKE_COMMAND} -G "Visual Studio 17" -A ${arch} .. WORKING_DIRECTORY "${filepath}/build" RESULT_VARIABLE res)
        if(NOT res EQUAL 0)
            message(STATUS "seems like there are some build files missing")
            message(STATUS "please try again...the framework will get downloaded anew")
            file(REMOVE ${filepath}/local_version.txt)
            message(FATAL_ERROR "BUILD FILES MISSING, PLEASE TRY AGAIN (${res})")
        endif()
        # build solution with MSBuild.exe
        download_file("https://github.com/microsoft/vswhere/releases/download/3.1.1/vswhere.exe" ${filepath}/vswhere.exe)
        execute_process(COMMAND vswhere.exe -version "[16.0,18.0)" -products * -requires Microsoft.Component.MSBuild -prerelease -latest -utf8 -format json OUTPUT_VARIABLE json WORKING_DIRECTORY ${filepath})
        file(REMOVE_RECURSE "${filepath}/vswhere.exe")
        string(JSON install_path GET ${json} 0 installationPath)
        set(msbuild_path "${install_path}\\MSBuild\\Current\\Bin\\MSBuild.exe")
        if(EXISTS ${msbuild_path})
            message(STATUS "msbuild found at ${msbuild_path}")
        else()
            message(FATAL_ERROR "msbuild not found")
        endif()

        execute_process(COMMAND ${msbuild_path} cef.sln /p:Configuration=Debug /p:Platform=${arch} WORKING_DIRECTORY "${filepath}/build")
        execute_process(COMMAND ${msbuild_path} cef.sln /p:Configuration=Release /p:Platform=${arch} WORKING_DIRECTORY "${filepath}/build")

        file(INSTALL "${filepath}/build/libcef_dll_wrapper/Debug/" DESTINATION "${filepath}/Debug")
        file(INSTALL "${filepath}/build/libcef_dll_wrapper/Release/" DESTINATION "${filepath}/Release")
        file(REMOVE_RECURSE "${filepath}/build")

    elseif(CMAKE_SYSTEM_NAME STREQUAL "Darwin")
        #delete test folder...is not needed
        file(REMOVE_RECURSE ${filepath}/tests)
        # debug
        file(MAKE_DIRECTORY "${filepath}/build")
        execute_process(COMMAND ${CMAKE_COMMAND} -G "Xcode" .. WORKING_DIRECTORY "${filepath}/build")
        # build
        # just build release for macos
        execute_process(COMMAND xcodebuild -project cef.xcodeproj -configuration Debug -arch ${arch} WORKING_DIRECTORY "${filepath}/build")
        file(COPY_FILE "${filepath}/build/libcef_dll_wrapper/Debug/libcef_dll_wrapper.a" "${filepath}/Debug/libcef_dll_wrapper.a")
        # release
        # build 
        execute_process(COMMAND xcodebuild -project cef.xcodeproj -configuration Release -arch ${arch} WORKING_DIRECTORY "${filepath}/build")
        file(COPY_FILE "${filepath}/build/libcef_dll_wrapper/Release/libcef_dll_wrapper.a" "${filepath}/Release/libcef_dll_wrapper.a")
        #file(REMOVE_RECURSE "${filepath}/build")
    endif()

endfunction(build_cef)

function(prepare_and_build filepath)
    # universal build for macos
    # due to the sandboxing of cocoapods we need to install in the macos directory
    if(CMAKE_SYSTEM_NAME STREQUAL "Darwin")
        set(arch arm64)
        download_file(${cef_path_${arch}} ${CMAKE_CURRENT_SOURCE_DIR}/cef.tar.bz2)
        extract_file(${CMAKE_CURRENT_SOURCE_DIR}/cef.tar.bz2 ${filepath}/${arch})
        file(REMOVE_RECURSE ${CMAKE_CURRENT_SOURCE_DIR}/cef.tar.bz2)
        build_cef(${filepath}/${arch})
        set(arch x86_64)
        download_file(${cef_path_${arch}} ${CMAKE_CURRENT_SOURCE_DIR}/cef.tar.bz2)
        extract_file(${CMAKE_CURRENT_SOURCE_DIR}/cef.tar.bz2 ${filepath}/${arch})
        file(REMOVE_RECURSE ${CMAKE_CURRENT_SOURCE_DIR}/cef.tar.bz2)
        build_cef(${filepath}/${arch})
        execute_process(COMMAND bash build_cef_macos.sh OUTPUT out WORKING_DIRECTORY "${CMAKE_CURRENT_SOURCE_DIR}")
        message(STATUS ${out})
        message(STATUS ${CMAKE_CURRENT_SOURCE_DIR})
    else()
        download_file(${cef_path_${arch}} ${CMAKE_CURRENT_SOURCE_DIR}/cef.tar.bz2)
        extract_file(${CMAKE_CURRENT_SOURCE_DIR}/cef.tar.bz2 ${filepath})
        file(REMOVE_RECURSE ${CMAKE_CURRENT_SOURCE_DIR}/cef.tar.bz2)
        build_cef(${filepath})
    endif()
    file(WRITE ${filepath}/local_version.txt ${cef_version})
endfunction(prepare_and_build)
